//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    #[serde(default)]
    pub cookies: biscotti::ProcessorConfig,
    pub database: app::configuration::DatabaseConfig,
    pub server: app::configuration::ServerConfig,
    #[serde(default)]
    pub session: pavex_session::SessionConfig,
}
pub struct ApplicationState {
    pub processor: biscotti::Processor,
    pub session_config: pavex_session::SessionConfig,
    pub session_store: pavex_session::SessionStore,
}
impl ApplicationState {
    pub async fn new(
        app_config: crate::ApplicationConfig,
        v0: sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new(app_config.session, v0, app_config.cookies).await)
    }
    async fn _new(
        v0: pavex_session::SessionConfig,
        v1: sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v2: biscotti::ProcessorConfig,
    ) -> crate::ApplicationState {
        let v3 = pavex_session_sqlx::PostgresSessionStore::new(v1);
        let v4 = pavex_session::SessionStore::new::<
            pavex_session_sqlx::PostgresSessionStore,
        >(v3);
        let v5 = <pavex::cookie::Processor as core::convert::From<
            pavex::cookie::ProcessorConfig,
        >>::from(v2);
        crate::ApplicationState {
            processor: v5,
            session_config: v0,
            session_store: v4,
        }
    }
}
#[deprecated(note = "Use `ApplicationState::new` instead.")]
pub async fn build_application_state(
    app_config: crate::ApplicationConfig,
    v0: sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    crate::ApplicationState::new(app_config, v0).await
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/api/ping", 0u32).unwrap();
        router.insert("/clear", 1u32).unwrap();
        router.insert("/client", 2u32).unwrap();
        router.insert("/cycle_id", 3u32).unwrap();
        router.insert("/delete", 4u32).unwrap();
        router.insert("/get", 5u32).unwrap();
        router.insert("/get_struct", 6u32).unwrap();
        router.insert("/insert", 7u32).unwrap();
        router.insert("/insert_struct", 8u32).unwrap();
        router.insert("/invalidate", 9u32).unwrap();
        router.insert("/remove", 10u32).unwrap();
        router.insert("/remove_raw", 11u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_12::entrypoint(
                    &state.processor,
                    &state.session_store,
                    &state.session_config,
                    &request_head,
                    matched_route_template,
                    &allowed_methods,
                )
                .await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/ping",
                        );
                        route_11::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/ping",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/clear",
                        );
                        route_0::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/clear",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            2u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/client",
                        );
                        route_1::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/client",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            3u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/cycle_id",
                        );
                        route_2::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/cycle_id",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            4u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/delete",
                        );
                        route_3::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/delete",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            5u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/get",
                        );
                        route_4::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/get",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            6u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/get_struct",
                        );
                        route_5::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/get_struct",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            7u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/insert",
                        );
                        route_9::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/insert",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            8u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/insert_struct",
                        );
                        route_10::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/insert_struct",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            9u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/invalidate",
                        );
                        route_6::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/invalidate",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            10u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/remove",
                        );
                        route_7::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/remove",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            11u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/remove_raw",
                        );
                        route_8::entrypoint(
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/remove_raw",
                        );
                        route_12::entrypoint(
                                &state.processor,
                                &state.session_store,
                                &state.session_config,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_0::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_0::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::clear::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_1::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_1::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::client::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_2::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_2::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::cycle_id::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_3::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_3::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::delete::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_4::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_4::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::get::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_5 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_5::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_5::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::get_struct::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_6 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_6::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_6::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::invalidate::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_7 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_7::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_7::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::remove::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_8 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_8::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_8::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::remove_raw::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_9 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_9::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_9::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::insert::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_10 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, &s_0, s_1, &mut s_2).await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::extract_request_cookies(v2, v4);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v2, v3, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v2, v3, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v1);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v0, v1, v11);
        let v13 = crate::route_10::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v4,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_10::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::response::Response {
        let v2 = app::ops::insert_struct::handler(v1).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::ops::e500(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: pavex_session::Session<'_>,
        v3: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v4 = pavex_session::finalize_session(v0, v3, v2).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex_session::errors::FinalizeError::into_response(&v5);
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_11 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_session::SessionStore,
        s_1: &'b pavex_session::SessionConfig,
        s_2: &'c pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex::cookie::ResponseCookies,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex_session::SessionStore,
        s_4: &'c pavex_session::SessionConfig,
        s_5: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone()).await;
        let response = post_processing_1(response, s_3, s_4, s_5, s_2, &s_0, &mut s_1)
            .await;
        let response = post_processing_2(response, s_1, &s_0, s_2).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::response::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex_session::SessionStore,
        v1: &pavex_session::SessionConfig,
        v2: &pavex::request::RequestHead,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::cookie::ResponseCookies::new();
        let v6 = pavex::telemetry::ServerRequestId::generate();
        let v7 = app::telemetry::root_span(v2, v3, v6);
        let v8 = crate::route_11::Next0 {
            s_0: v7,
            s_1: v5,
            s_2: v4,
            s_3: v0,
            s_4: v1,
            s_5: v2,
            next: stage_1,
        };
        let v9 = pavex::middleware::Next::new(v8);
        let v10 = pavex::middleware::wrap_noop(v9).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v10)
    }
    async fn wrapping_1(v0: pavex_tracing::RootSpan) -> pavex::response::Response {
        let v1 = crate::route_11::Next1 {
            s_0: &v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v4 = pavex_tracing::logger(v3, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::ping::get();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_session::SessionStore,
        v2: &pavex_session::SessionConfig,
        v3: &pavex::request::RequestHead,
        v4: &biscotti::Processor,
        v5: &pavex_tracing::RootSpan,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v7 = pavex::cookie::extract_request_cookies(v3, v4);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v5).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v2);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v1, v2, v10);
        let v12 = pavex_session::finalize_session(v0, v6, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v5).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v14,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::cookie::ResponseCookies,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex_session::SessionStore,
        s_4: &'c pavex_session::SessionConfig,
        s_5: &'d pavex::request::RequestHead,
        next: fn(
            pavex_tracing::RootSpan,
            pavex::cookie::ResponseCookies,
            &'a biscotti::Processor,
            &'b pavex_session::SessionStore,
            &'c pavex_session::SessionConfig,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_12 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_session::SessionStore,
        s_2: &'c pavex_session::SessionConfig,
        s_3: &'d pavex::request::RequestHead,
        s_4: pavex::request::path::MatchedPathPattern,
        s_5: &'e pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::router::AllowedMethods,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        s_4: &'c pavex_session::SessionStore,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), s_1).await;
        let response = post_processing_1(response, s_4, s_5, s_6, s_3, &s_0, &mut s_2)
            .await;
        let response = post_processing_2(response, s_2, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex_session::SessionStore,
        v2: &pavex_session::SessionConfig,
        v3: &pavex::request::RequestHead,
        v4: pavex::request::path::MatchedPathPattern,
        v5: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v6 = pavex::cookie::ResponseCookies::new();
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v3, v4, v7);
        let v9 = crate::route_12::Next0 {
            s_0: v8,
            s_1: v5,
            s_2: v6,
            s_3: v0,
            s_4: v1,
            s_5: v2,
            s_6: v3,
            next: stage_1,
        };
        let v10 = pavex::middleware::Next::new(v9);
        let v11 = pavex::middleware::wrap_noop(v10).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v2 = crate::route_12::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_session::SessionStore,
        v2: &pavex_session::SessionConfig,
        v3: &pavex::request::RequestHead,
        v4: &biscotti::Processor,
        v5: &pavex_tracing::RootSpan,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::response::Response {
        let v7 = pavex::cookie::extract_request_cookies(v3, v4);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v5).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v2);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v1, v2, v10);
        let v12 = pavex_session::finalize_session(v0, v6, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v5).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v14,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::response::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &pavex_tracing::RootSpan,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v3);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::router::AllowedMethods,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        s_4: &'c pavex_session::SessionStore,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex::request::RequestHead,
        next: fn(
            pavex_tracing::RootSpan,
            &'a pavex::router::AllowedMethods,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
            &'c pavex_session::SessionStore,
            &'d pavex_session::SessionConfig,
            &'e pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
            )
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::router::AllowedMethods) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
